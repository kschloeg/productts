"use strict";
var _ = require('lodash');
var ProductStatus = require('../model/ProductStatus');
var Product = require('../model/Product');
var ProductDocumentManager = require('../model/ProductDocumentManager');
var ProductManager = (function () {
    function ProductManager() {
    }
    ProductManager.create = function (product, callback) {
        if (!product)
            return callback(new Error("Cannot create null or undefined Object"), null);
        var now = new Date();
        product.create_date = now;
        product.status = product.status || ProductStatus.ACTIVE;
        delete product['_id'];
        ProductDocumentManager.create(product, function (createErr, document) {
            if (createErr)
                return callback(createErr, null);
            if (!document)
                return callback(new Error("Create Error"), null);
            callback(null, new Product(document));
        });
    };
    ;
    ProductManager.findById = function (product_id, options, callback) {
        if (!product_id)
            return callback(new Error("Missing ID"), null);
        var criteria = { _id: product_id };
        if (!options || !options.include_inactive) {
            criteria['status'] = ProductStatus.ACTIVE;
        }
        ProductDocumentManager.findOne(criteria, function (findErr, document) {
            if (findErr)
                return callback(findErr, null);
            if (!document)
                return callback(null, null);
            callback(null, new Product(document));
        });
    };
    ProductManager.update = function (args, callback) {
        args.oldProduct = _.merge(args.oldProduct, args.newProduct);
    };
    ProductManager.helloWorld = function () {
        console.log("Hello World");
    };
    ProductManager.DEFAULT_PRODUCT_NAME = "Some Product";
    return ProductManager;
}());
module.exports = ProductManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2R1Y3QvbGliL1Byb2R1Y3RNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLENBQUMsV0FBVyxRQUFRLENBQUMsQ0FBQztBQUc3QixJQUFPLGFBQWEsV0FBVyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3pELElBQU8sT0FBTyxXQUFXLGtCQUFrQixDQUFDLENBQUM7QUFFN0MsSUFBTyxzQkFBc0IsV0FBVyxpQ0FBaUMsQ0FBQyxDQUFDO0FBRzNFO0lBQUE7SUEwQ0EsQ0FBQztJQXZDaUIscUJBQU0sR0FBcEIsVUFBcUIsT0FBeUIsRUFBRSxRQUFrRDtRQUM5RixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6RixJQUFJLEdBQUcsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzNCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQ3hELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXRCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBQyxTQUFTLEVBQUUsUUFBeUI7WUFDeEUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEUsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7SUFFYSx1QkFBUSxHQUF0QixVQUF1QixVQUFrQixFQUFFLE9BQXVDLEVBQUUsUUFBa0Q7UUFDbEksRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7WUFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWhFLElBQUksUUFBUSxHQUFHLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUN4QyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUM5QyxDQUFDO1FBRUQsc0JBQXNCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFDLE9BQU8sRUFBRSxRQUF5QjtZQUN4RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7Z0JBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0MsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVhLHFCQUFNLEdBQXBCLFVBQXFCLElBQW9FLEVBQUUsUUFBa0Q7UUFDekksSUFBSSxDQUFDLFVBQVUsR0FBcUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUdsRixDQUFDO0lBRWEseUJBQVUsR0FBeEI7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUF4Q2EsbUNBQW9CLEdBQUcsY0FBYyxDQUFDO0lBeUN4RCxxQkFBQztBQUFELENBMUNBLEFBMENDLElBQUE7QUFFRCxpQkFBUyxjQUFjLENBQUMiLCJmaWxlIjoicHJvZHVjdC9saWIvUHJvZHVjdE1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuaW1wb3J0IGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcblxuaW1wb3J0IFByb2R1Y3RTdGF0dXMgPSByZXF1aXJlKCcuLi9tb2RlbC9Qcm9kdWN0U3RhdHVzJyk7XG5pbXBvcnQgUHJvZHVjdCA9IHJlcXVpcmUoJy4uL21vZGVsL1Byb2R1Y3QnKTtcbmltcG9ydCBQcm9kdWN0SW50ZXJmYWNlID0gcmVxdWlyZSgnLi4vbW9kZWwvUHJvZHVjdEludGVyZmFjZScpO1xuaW1wb3J0IFByb2R1Y3REb2N1bWVudE1hbmFnZXIgPSByZXF1aXJlKCcuLi9tb2RlbC9Qcm9kdWN0RG9jdW1lbnRNYW5hZ2VyJyk7XG5pbXBvcnQgUHJvZHVjdERvY3VtZW50ID0gcmVxdWlyZSgnLi4vbW9kZWwvUHJvZHVjdERvY3VtZW50Jyk7XG5cbmNsYXNzIFByb2R1Y3RNYW5hZ2VyIHtcbiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfUFJPRFVDVF9OQU1FID0gXCJTb21lIFByb2R1Y3RcIjtcblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHByb2R1Y3Q6IFByb2R1Y3RJbnRlcmZhY2UsIGNhbGxiYWNrOiAoZXJyLCBwcm9kdWN0OiBQcm9kdWN0SW50ZXJmYWNlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIGlmICghcHJvZHVjdCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgbnVsbCBvciB1bmRlZmluZWQgT2JqZWN0XCIpLCBudWxsKTtcblxuICAgICAgICB2YXIgbm93OiBEYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgcHJvZHVjdC5jcmVhdGVfZGF0ZSA9IG5vdztcbiAgICAgICAgcHJvZHVjdC5zdGF0dXMgPSBwcm9kdWN0LnN0YXR1cyB8fCBQcm9kdWN0U3RhdHVzLkFDVElWRTtcbiAgICAgICAgZGVsZXRlIHByb2R1Y3RbJ19pZCddO1xuXG4gICAgICAgIFByb2R1Y3REb2N1bWVudE1hbmFnZXIuY3JlYXRlKHByb2R1Y3QsIChjcmVhdGVFcnIsIGRvY3VtZW50OiBQcm9kdWN0RG9jdW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChjcmVhdGVFcnIpIHJldHVybiBjYWxsYmFjayhjcmVhdGVFcnIsIG51bGwpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIkNyZWF0ZSBFcnJvclwiKSwgbnVsbCk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXcgUHJvZHVjdChkb2N1bWVudCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBmaW5kQnlJZChwcm9kdWN0X2lkOiBzdHJpbmcsIG9wdGlvbnM6IHsgaW5jbHVkZV9pbmFjdGl2ZT86IGJvb2xlYW4gfSwgY2FsbGJhY2s6IChlcnIsIHByb2R1Y3Q6IFByb2R1Y3RJbnRlcmZhY2UpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFwcm9kdWN0X2lkKSByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiTWlzc2luZyBJRFwiKSwgbnVsbCk7XG5cbiAgICAgICAgdmFyIGNyaXRlcmlhID0geyBfaWQ6IHByb2R1Y3RfaWQgfTtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmluY2x1ZGVfaW5hY3RpdmUpIHtcbiAgICAgICAgICAgIGNyaXRlcmlhWydzdGF0dXMnXSA9IFByb2R1Y3RTdGF0dXMuQUNUSVZFO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvZHVjdERvY3VtZW50TWFuYWdlci5maW5kT25lKGNyaXRlcmlhLCAoZmluZEVyciwgZG9jdW1lbnQ6IFByb2R1Y3REb2N1bWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbmRFcnIpIHJldHVybiBjYWxsYmFjayhmaW5kRXJyLCBudWxsKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQpIHJldHVybiBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG5ldyBQcm9kdWN0KGRvY3VtZW50KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlKGFyZ3M6IHsgb2xkUHJvZHVjdDogUHJvZHVjdEludGVyZmFjZTsgbmV3UHJvZHVjdDogUHJvZHVjdEludGVyZmFjZSB9LCBjYWxsYmFjazogKGVyciwgcHJvZHVjdDogUHJvZHVjdEludGVyZmFjZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBhcmdzLm9sZFByb2R1Y3QgPSA8UHJvZHVjdEludGVyZmFjZT5fLm1lcmdlKGFyZ3Mub2xkUHJvZHVjdCwgYXJncy5uZXdQcm9kdWN0KTtcblxuICAgICAgICAvLyByZXBvc2l0b3J5X3V0aWxzIGNhbGxcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGhlbGxvV29ybGQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gV29ybGRcIik7XG4gICAgfVxufVxuXG5leHBvcnQgPSBQcm9kdWN0TWFuYWdlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
